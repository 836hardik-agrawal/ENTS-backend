name: Build and Deploy

on:
  push:
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_USERNAME: ${{ github.actor }}
  DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

concurrency: production

jobs:
  portal:
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Github containers
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Extract metadata for portal
        id: meta-portal
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}-portal

      - name: Build and push portal
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ steps.meta-portal.outputs.tags }}
          labels: ${{ steps.meta-portal.outputs.labels }}

  cs-http:
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Github containers
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Extract metadata for Chirpstack HTTP
        id: meta-cs
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}-cs-http

      - name: Build and push Chirpstack HTTP Integration
        uses: docker/build-push-action@v3
        with:
          push: true
          file: cs-http.Dockerfile
          tags: ${{ steps.meta-cs.outputs.tags }}
          labels: ${{ steps.meta-cs.outputs.labels }}

  http-api:
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Github containers
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Extract metadata for HTTP API
        id: meta-http-api
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}-http-api

      - name: Build and push HTTP API
        uses: docker/build-push-action@v3
        with:
          push: true
          file: http-api.Dockerfile
          tags: ${{ steps.meta-http-api.outputs.tags }}
          labels: ${{ steps.meta-http-api.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: [portal, cs-http, http-api]
    environment: ${{ github.ref_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SERVER_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "$SERVER_SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
        env:
          SERVER_SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
        shell: bash

      - name: Generate portal.yaml
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: k8s/portal.yaml.j2
          output_file: k8s/portal.yaml
      
      - name: Generate http-api.yaml
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: k8s/http-api.yaml.j2
          output_file: k8s/http-api.yaml
      
      - name: Generate cs-http.yaml
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: k8s/cs-http.yaml.j2
          output_file: k8s/cs-http.yaml

      - name: Generate dburl-secret.yaml
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: k8s/dburl-secret.yaml.j2
          output_file: k8s/dburl-secret.yaml

      - name: Apply configurations
        shell: bash
        run: cat k8s/*.yaml | ssh ${{ secrets.USER }}@${{ secrets.HOSTNAME }} '/snap/bin/microk8s kubectl apply -f -'
